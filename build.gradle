plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.5.10'
  id 'idea'
  id 'com.diffplug.spotless' version '6.4.0'
  id 'com.bmuschko.docker-remote-api' version '7.0.1'
  id 'com.github.johnrengelman.shadow' version '7.0.0'
  id "com.avast.gradle.docker-compose" version "0.14.3"
}


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

group = 'de.tobi6112'

repositories {
  mavenCentral()
  jcenter()
}

ext {
  slf4jVersion = '1.7.30'
  hopliteVersion = '1.4.1'
  discord4jVersion = '3.1.5'
  junitVersion = '5.7.2'
  kotlinVersion = '1.5.10'
  kotestVersion = '4.6.0'
  fuelVersion = '2.3.1'
  slf4jVersion = '1.7.30'
  koin_version = '3.1.0'
}

dependencies {
  implementation project(":landau-core")
  implementation project(":landau-command")
  implementation project(":landau-data")

  implementation 'com.github.ajalt.clikt:clikt:3.2.0'
  implementation "com.discord4j:discord4j-core:$discord4jVersion"
  implementation 'io.projectreactor:reactor-tools'
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
  implementation 'io.github.microutils:kotlin-logging-jvm:2.0.8'
  implementation "io.insert-koin:koin-core:$koin_version"
  implementation "io.insert-koin:koin-logger-slf4j:$koin_version"


  runtimeOnly "org.slf4j:slf4j-api:$slf4jVersion"
  runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"


  testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
  testImplementation "io.kotest:kotest-runner-junit5:$kotestVersion"
  testImplementation "io.kotest:kotest-assertions-core:$kotestVersion"
  testImplementation "io.kotest:kotest-property:$kotestVersion"
  testImplementation 'org.mockito.kotlin:mockito-kotlin:3.2.0'
  testImplementation "org.mockito:mockito-core:3.+"

  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

test {
  useJUnitPlatform()
}

compileKotlin {
  kotlinOptions.jvmTarget = '11'
}

compileTestKotlin {
  kotlinOptions.jvmTarget = '11'
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

jar {
  manifest {
    attributes('Main-Class': 'de.tobi6112.landau.LandauKt')
  }
}

shadowJar {
  archiveVersion.set('')
  mergeServiceFiles()
}

assemble {
  dependsOn shadowJar
}

task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/version.properties").withWriter { w ->
      Properties p = new Properties()
      p['version'] = project.version.toString()
      p.store w, null
    }
  }
}

classes {
  dependsOn createProperties
}

spotless {
  ratchetFrom 'origin/master'

  format 'misc', {
    target '*.gradle', '*.md', '.gitignore'

    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }

  kotlin {
    ktfmt()
    diktat('0.5.3').configFile("diktat-analysis.yml")
  }
}

task createDockerfile(type: Dockerfile) {
  onlyIf { !project.file("$buildDir/docker/Dockerfile").exists() }
  group 'Docker'
  description 'Generate a Dockerfile for the application if it does not exist'
  dependsOn shadowJar
  destFile = project.file("$buildDir/docker/Dockerfile")
  from('adoptopenjdk:11-jre-hotspot')
  runCommand('mkdir /app')
  copyFile("./libs/${shadowJar.archiveFileName.getOrNull()}", '/app/landau.jar')
  entryPoint('java', '-jar', '/app/landau.jar')
}

task buildImage(type: DockerBuildImage) {
  group 'Docker'
  description 'Build docker image'
  dependsOn createDockerfile
  inputDir = file('./build')
  dockerFile = file("$buildDir/docker/Dockerfile")
  images.add('docker.pkg.github.com/tobi6112/landau/landau:latest')
  images.add("docker.pkg.github.com/tobi6112/landau/landau:${project.version}")
}

task createContainer(type: DockerCreateContainer) {
  group 'Docker'
  description 'Create container'
  dependsOn buildImage

  def map = [:]

  if(file('.env').exists()) {
    file('.env').readLines().each() {
      if (!it.isEmpty() && !it.startsWith("#")) {
        def pos = it.indexOf("=")
        def key = it.substring(0, pos)
        def value = it.substring(pos + 1)

        map[key] = value
      }
    }
  }

  targetImageId buildImage.getImageId()
  containerName = project.name.toLowerCase()
  envVars = map
  hostConfig.autoRemove = true
}

task startContainer(type: DockerStartContainer) {
  group 'Docker'
  description 'Start container'
  dependsOn createContainer
  targetContainerId createContainer.getContainerId()
}

task pushImage(type: DockerPushImage) {
  dependsOn buildImage
  images.add('docker.pkg.github.com/tobi6112/landau/landau:latest')
  images.add("docker.pkg.github.com/tobi6112/landau/landau:${project.version}")
  registryCredentials {
    url = "https://docker.pkg.github.com"
    username = System.getenv('REGISTRY_USERNAME')
    password = System.getenv('REGISTRY_PASSWORD')
  }
}

composeUp {
  dependsOn buildImage
  dockerCompose {
    useComposeFiles = ['src/main/docker/docker-compose.yml']
  }
}
